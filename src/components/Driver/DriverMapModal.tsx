import { onMount, onCleanup, createSignal } from 'solid-js';
import type { JSX } from 'solid-js';
import { Modal, Badge, Button } from '../UI';
import type { DriverWithStats } from '../../types/driver';
import styles from './DriverMapModal.module.css';

interface DriverMapModalProps {
  driver: DriverWithStats | null;
  isOpen: boolean;
  onClose: () => void;
}

function DriverMapModal(props: DriverMapModalProps): JSX.Element {
  const [mapContainer, setMapContainer] = createSignal<HTMLDivElement | null>(null);
  const [mapInstance, setMapInstance] = createSignal<any>(null);
  const [markerInstance, setMarkerInstance] = createSignal<any>(null);

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
  const handleKeyDown = (event: KeyboardEvent) => {
    if (event.key === 'Escape') {
      props.onClose();
    }
  };

  onMount(() => {
    document.addEventListener('keydown', handleKeyDown);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –ø–æ—Å–ª–µ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (props.isOpen && props.driver) {
      setTimeout(() => {
        initializeMap();
      }, 100);
    }
  });

  onCleanup(() => {
    document.removeEventListener('keydown', handleKeyDown);
    // –û—á–∏—â–∞–µ–º –∫–∞—Ä—Ç—É –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
    if (mapInstance()) {
      mapInstance().remove();
      setMapInstance(null);
    }
    if (markerInstance()) {
      setMarkerInstance(null);
    }
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
  const initializeMap = async () => {
    if (!props.driver || !mapContainer() || !props.isOpen) {
      console.log('üö´ –ö–∞—Ä—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è:', { 
        driver: !!props.driver, 
        container: !!mapContainer(), 
        isOpen: props.isOpen 
      });
      return;
    }

    try {
      console.log('üó∫Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–∞—Ä—Ç—ã –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è:', props.driver.first_name);
      
      // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç Leaflet
      const L = await import('leaflet');
      
      // –ò–º–ø–æ—Ä—Ç —Å—Ç–∏–ª–µ–π Leaflet
      await import('leaflet/dist/leaflet.css');

      // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–æ–¥–∏—Ç–µ–ª—è —Å fallback
      const driverCoords = props.driver.last_gps || {
        lat: 40.1776, // –¶–µ–Ω—Ç—Ä –ï—Ä–µ–≤–∞–Ω–∞
        lon: 44.5126,
        ts: new Date().toISOString()
      };

      console.log('üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–æ–¥–∏—Ç–µ–ª—è:', driverCoords);

      // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
      console.log('üó∫Ô∏è –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏:', [driverCoords.lat, driverCoords.lon]);
      const map = L.map(mapContainer()!).setView([driverCoords.lat, driverCoords.lon], 15);
      setMapInstance(map);
      console.log('‚úÖ –ö–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π OpenStreetMap
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '¬© OpenStreetMap contributors'
      }).addTo(map);
      console.log('üó∫Ô∏è –°–ª–æ–π –∫–∞—Ä—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω');

      // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∏–∫–æ–Ω–∫—É –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è
      const driverIcon = L.divIcon({
        className: styles.driverMarker,
        html: `
          <div class="${styles.markerContent}">
            <div class="${styles.markerAvatar}">
              ${props.driver.first_name?.charAt(0) || '?'}${props.driver.last_name?.charAt(0) || '?'}
            </div>
            <div class="${styles.markerStatus} ${getStatusClass(props.driver.status)}"></div>
          </div>
        `,
        iconSize: [40, 40],
        iconAnchor: [20, 20],
        popupAnchor: [0, -20]
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –≤–æ–¥–∏—Ç–µ–ª—è
      console.log('üìç –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –≤–æ–¥–∏—Ç–µ–ª—è');
      const marker = L.marker([driverCoords.lat, driverCoords.lon], { icon: driverIcon })
        .addTo(map)
        .bindPopup(`
          <div class="${styles.driverPopup}">
            <h4>${props.driver.first_name} ${props.driver.last_name}</h4>
            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${getStatusText(props.driver.status)}</p>
            <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${props.driver.phone}</p>
            <p><strong>–†–∞–π–æ–Ω:</strong> ${props.driver.district?.name_ru || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
            <p><strong>–ê–¥—Ä–µ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è:</strong> ${props.driver.todayStats?.deliveredStops || 0}/${props.driver.todayStats?.totalStops || 0}</p>
            <p><strong>–ü—Ä–æ–±–µ–≥:</strong> ${(props.driver.todayStats?.distanceKm || 0).toFixed(1)} –∫–º</p>
            <p><strong>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</strong> ${new Date(driverCoords.ts).toLocaleTimeString('ru-RU')}</p>
            <div class="${styles.popupActions}">
              <button onclick="callDriver('${props.driver.phone}')" class="${styles.popupBtn}">üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å</button>
              <button onclick="messageDriver('${props.driver.id}')" class="${styles.popupBtn}">üí¨ –ù–∞–ø–∏—Å–∞—Ç—å</button>
            </div>
          </div>
        `);

      setMarkerInstance(marker);
      console.log('‚úÖ –ú–∞—Ä–∫–µ—Ä –≤–æ–¥–∏—Ç–µ–ª—è –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');

      // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ø–∞–ø–∞
      (window as any).callDriver = (phone: string) => {
        window.open(`tel:${phone}`, '_self');
      };

      (window as any).messageDriver = (driverId: string) => {
        alert(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—é ${driverId}`);
      };

      // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –≤–æ–¥–∏—Ç–µ–ª–µ
      map.setView([driverCoords.lat, driverCoords.lon], 15);
      console.log('üéØ –ö–∞—Ä—Ç–∞ –æ—Ç—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –≤–æ–¥–∏—Ç–µ–ª–µ');
      console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã:', error);
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        driver: props.driver?.first_name,
        coords: props.driver?.last_gps,
        container: !!mapContainer(),
        isOpen: props.isOpen
      });
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞
  const getStatusClass = (status: string): string => {
    switch (status) {
      case 'ONLINE':
        return styles.statusOnline;
      case 'DRIVING':
        return styles.statusDriving;
      case 'IDLE':
        return styles.statusIdle;
      case 'OFFLINE':
        return styles.statusOffline;
      default:
        return styles.statusUnknown;
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
  const getStatusText = (status: string): string => {
    switch (status) {
      case 'ONLINE':
        return '–û–Ω–ª–∞–π–Ω';
      case 'DRIVING':
        return '–í –ø—É—Ç–∏';
      case 'IDLE':
        return '–ü—Ä–æ—Å—Ç–æ–π';
      case 'OFFLINE':
        return '–û—Ñ–ª–∞–π–Ω';
      default:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const handleMapResize = () => {
    if (mapInstance()) {
      setTimeout(() => {
        mapInstance().invalidateSize();
      }, 100);
    }
  };

  // –ö–∞—Ä—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ onMount

  if (!props.driver || !props.isOpen) {
    return <></>;
  }

  const driver = props.driver;

  return (
    <Modal open={props.isOpen} onClose={props.onClose} size="large">
      <div class={styles.modalContent}>
        {/* Header */}
        <div class={styles.header}>
          <div class={styles.driverInfo}>
            <div class={styles.driverAvatar}>
              {driver.first_name?.charAt(0) || '?'}{driver.last_name?.charAt(0) || '?'}
            </div>
            <div class={styles.driverDetails}>
              <h2 class={styles.driverName}>
                {driver.first_name} {driver.last_name}
              </h2>
              <div class={styles.driverMeta}>
                <Badge status={driver.status} size="medium" />
                <span class={styles.phone}>üìû {driver.phone}</span>
                <span class={styles.district}>üåç {driver.district?.name_ru || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</span>
              </div>
            </div>
          </div>
        </div>

        {/* Map Container */}
        <div class={styles.mapContainer}>
          <div 
            ref={setMapContainer}
            class={styles.map}
            onLoad={handleMapResize}
          />
          
          {/* Map Controls */}
          <div class={styles.mapControls}>
            <Button 
              variant="secondary" 
              size="small"
              onClick={() => {
                if (mapInstance() && markerInstance()) {
                  const coords = markerInstance().getLatLng();
                  mapInstance().setView(coords, 15);
                }
              }}
            >
              üéØ –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å
            </Button>
            <Button 
              variant="secondary" 
              size="small"
              onClick={() => {
                if (mapInstance()) {
                  mapInstance().zoomIn();
                }
              }}
            >
              üîç+ –£–≤–µ–ª–∏—á–∏—Ç—å
            </Button>
            <Button 
              variant="secondary" 
              size="small"
              onClick={() => {
                if (mapInstance()) {
                  mapInstance().zoomOut();
                }
              }}
            >
              üîç- –£–º–µ–Ω—å—à–∏—Ç—å
            </Button>
          </div>
        </div>

        {/* Driver Stats */}
        <div class={styles.driverStats}>
          <div class={styles.statItem}>
            <span class={styles.statLabel}>–ê–¥—Ä–µ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è:</span>
            <span class={styles.statValue}>
              {driver.todayStats?.deliveredStops || 0}/{driver.todayStats?.totalStops || 0}
            </span>
          </div>
          <div class={styles.statItem}>
            <span class={styles.statLabel}>–ü—Ä–æ–±–µ–≥:</span>
            <span class={styles.statValue}>
              {(driver.todayStats?.distanceKm || 0).toFixed(1)} –∫–º
            </span>
          </div>
          <div class={styles.statItem}>
            <span class={styles.statLabel}>–ü—Ä–æ—Å—Ç–æ–π:</span>
            <span class={styles.statValue}>
              {Math.floor((driver.todayStats?.idleTimeMinutes || 0) / 60)}—á {((driver.todayStats?.idleTimeMinutes || 0) % 60)}–º
            </span>
          </div>
          <div class={styles.statItem}>
            <span class={styles.statLabel}>–ü—Ä–æ–±–ª–µ–º—ã:</span>
            <span class={styles.statValue}>
              {driver.todayStats?.issuesCount || 0}
            </span>
          </div>
        </div>

        {/* Actions */}
        <div class={styles.actions}>
          <Button 
            variant="primary" 
            onClick={() => window.open(`tel:${driver.phone}`, '_self')}
          >
            üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—é
          </Button>
          <Button 
            variant="secondary" 
            onClick={() => alert(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—é ${driver.id}`)}
          >
            üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
          </Button>
          <Button variant="ghost" onClick={props.onClose}>
            ‚ùå –ó–∞–∫—Ä—ã—Ç—å
          </Button>
        </div>
      </div>
    </Modal>
  );
}

export default DriverMapModal;
