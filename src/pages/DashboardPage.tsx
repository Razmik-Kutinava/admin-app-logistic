import { onMount, onCleanup, createSignal } from 'solid-js';
import type { JSX } from 'solid-js';
import { Card, Badge, Chart, Table, Input, Select, Button, QuickFilters } from '../components/UI';
import { MapView } from '../components/Map';
import { PeriodComparison } from '../components/Analytics';
import { DriverDetailModal, DriverMapModal } from '../components/Driver';
import { AlertDetailModal } from '../components/Alert';
import { metricsStore, driversStore, alertsStore } from '../stores';
import { districtsStore } from '../stores/districtsStore';
import { exportDriversData, exportAnalyticsData, showExportNotification } from '../utils/export';
import type { DriverWithStats } from '../types/driver';
import type { AlertWithDetails } from '../types/alert';
import styles from './DashboardPage.module.css';

function DashboardPage(): JSX.Element {
  
  // Search and filter states
  const [searchQuery, setSearchQuery] = createSignal('');
  const [filterStatus, setFilterStatus] = createSignal<string | null>(null);
  const [filterRegion, setFilterRegion] = createSignal<string | null>(null);
  
  // Dark theme state
  const [isDarkMode, setIsDarkMode] = createSignal(false);
  
  // Map states
  const [showTracks, setShowTracks] = createSignal(false);
  const [showClusters, setShowClusters] = createSignal(false);
  
  // Driver modal state
  const [selectedDriver, setSelectedDriver] = createSignal<DriverWithStats | null>(null);
  const [isModalOpen, setIsModalOpen] = createSignal(false);

  // Alert modal state
  const [selectedAlert, setSelectedAlert] = createSignal<AlertWithDetails | null>(null);
  const [isAlertModalOpen, setIsAlertModalOpen] = createSignal(false);

  // Driver map modal state
  const [selectedDriverForMap, setSelectedDriverForMap] = createSignal<DriverWithStats | null>(null);
  const [isMapModalOpen, setIsMapModalOpen] = createSignal(false);

  // Debug modal state (commented out for production)
  // createEffect(() => {
  //   console.log('üîç Modal state:', {
  //     isModalOpen: isModalOpen(),
  //     selectedDriver: selectedDriver()?.first_name
  //   });
  // });


  // Filtered drivers
  const filteredDrivers = () => {
    let result = driversStore.drivers();
    
    // Search by name/phone
    if (searchQuery()) {
      const query = searchQuery().toLowerCase();
      result = result.filter(driver => 
        driver.first_name.toLowerCase().includes(query) ||
        driver.last_name.toLowerCase().includes(query) ||
        driver.phone.includes(query)
      );
    }
    
    // Filter by status
    if (filterStatus()) {
      result = result.filter(driver => driver.status === filterStatus());
    }
    
    // Filter by region/district
    if (filterRegion()) {
      result = result.filter(driver => 
        (driver.district?.name_ru || driver.region) === filterRegion()
      );
    }
    
    return result;
  };

  const toggleDarkMode = () => {
    const newMode = !isDarkMode();
    setIsDarkMode(newMode);
    
    if (newMode) {
      document.documentElement.classList.add('dark');
      localStorage.setItem('darkMode', 'true');
    } else {
      document.documentElement.classList.remove('dark');
      localStorage.setItem('darkMode', 'false');
    }
  };

  const handleExportDrivers = (format: 'csv' | 'pdf') => {
    exportDriversData(filteredDrivers(), format);
    showExportNotification(format);
  };

  const handleExportAnalytics = () => {
    exportAnalyticsData();
    showExportNotification('csv');
  };

  const getDistrictIcon = (districtName: string) => {
    const icons: Record<string, string> = {
      '–ö–µ–Ω—Ç—Ä–æ–Ω': 'üèõÔ∏è',
      '–ê—Ä–∞–±–∫–∏—Ä': 'üè¢',
      '–ê–≤–∞–Ω': 'üèòÔ∏è',
      '–≠—Ä–µ–±—É–Ω–∏': 'üè≠',
      '–ú–∞–ª–∞—Ç–∏—è-–°–µ–±–∞—Å—Ç–∏—è': 'üèòÔ∏è',
      '–®–µ–Ω–≥–∞–≤–∏—Ç': 'üè≠',
      '–ù–æ—Ä-–ù–æ—Ä–∫': 'üèòÔ∏è',
      '–ê—á–∞–ø–Ω—è–∫': 'üè¢',
      '–î–∞–≤–∏—Ç–∞—à–µ–Ω': 'üèòÔ∏è',
      '–ö–∞–Ω–∞–∫–µ—Ä-–ó–µ–π—Ç—É–Ω': 'üè≠',
      '–ù–æ—Ä–∫-–ú–∞—Ä–∞—à': 'üèòÔ∏è',
      '–ù—É–±–∞—Ä–∞—à–µ–Ω': 'üè¢'
    };
    return icons[districtName] || 'üèòÔ∏è';
  };

  const quickFilters = () => {
    const drivers = driversStore.drivers();
    
    // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–∞–π–æ–Ω—ã –∏–∑ –≤–æ–¥–∏—Ç–µ–ª–µ–π
    const districts = [...new Set(drivers.map(d => d.district?.name_ru || d.region).filter(Boolean))];
    
    return [
      {
        key: 'ONLINE',
        label: '–û–Ω–ª–∞–π–Ω',
        icon: 'üü¢',
        count: drivers.filter(d => d.status === 'ONLINE').length,
        active: filterStatus() === 'ONLINE'
      },
      {
        key: 'IDLE',
        label: '–ü—Ä–æ—Å—Ç–æ–π',
        icon: 'üü°',
        count: drivers.filter(d => d.status === 'IDLE').length,
        active: filterStatus() === 'IDLE'
      },
      {
        key: 'DRIVING',
        label: '–í –ø—É—Ç–∏',
        icon: 'üîµ',
        count: drivers.filter(d => d.status === 'DRIVING').length,
        active: filterStatus() === 'DRIVING'
      },
      {
        key: 'ALL_DISTRICTS',
        label: '–í—Å–µ —Ä–∞–π–æ–Ω—ã',
        icon: 'üåê',
        count: drivers.length,
        active: filterRegion() === null
      },
      // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ —Ä–∞–π–æ–Ω–∞–º
      ...districts.filter(Boolean).map(districtName => ({
        key: districtName!,
        label: districtName!,
        icon: getDistrictIcon(districtName!),
        count: drivers.filter(d => (d.district?.name_ru || d.region) === districtName).length,
        active: filterRegion() === districtName
      }))
    ];
  };

  const handleQuickFilterClick = (key: string) => {
    if (['ONLINE', 'IDLE', 'OFFLINE', 'DRIVING'].includes(key)) {
      // –î–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º (–µ—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω, —Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º)
      if (filterStatus() === key) {
        setFilterStatus(null);
      } else {
        setFilterStatus(key);
      }
    } else if (key === 'ALL_DISTRICTS') {
      setFilterRegion(null); // –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ä–∞–π–æ–Ω–∞–º
    } else {
      // –î–ª—è —Ä–∞–π–æ–Ω–æ–≤ - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º (–µ—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω, —Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º)
      if (filterRegion() === key) {
        setFilterRegion(null);
      } else {
        setFilterRegion(key);
      }
    }
  };

  const handleClearAllFilters = () => {
    setFilterStatus(null);
    setFilterRegion(null);
    setSearchQuery('');
  };

  const handleDriverClick = (driver: DriverWithStats) => {
    // console.log('üîç Opening modal for driver:', driver.first_name);
    // console.log('üîç Setting modal state:', {
    //   driverId: driver.id,
    //   driverName: driver.first_name,
    //   willSetModalOpen: true
    // });
    setSelectedDriver(driver);
    setIsModalOpen(true);
  };


  const handleCloseModal = () => {
    setIsModalOpen(false);
    setSelectedDriver(null);
  };

  // Alert handlers
  const handleAlertClick = (alert: AlertWithDetails) => {
    setSelectedAlert(alert);
    setIsAlertModalOpen(true);
  };

  const handleCloseAlertModal = () => {
    setIsAlertModalOpen(false);
    setSelectedAlert(null);
  };

  const handleAcknowledgeAlert = async (alertId: string) => {
    try {
      await alertsStore.acknowledgeAlert(alertId);
      // –ê–ª–µ—Ä—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—Å—è –∏–∑ —Å–ø–∏—Å–∫–∞ –±–ª–∞–≥–æ–¥–∞—Ä—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏—è
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∞–ª–µ—Ä—Ç–∞:', error);
    }
  };

  // Driver map handlers
  const handleDriverMapClick = (driver: DriverWithStats) => {
    setSelectedDriverForMap(driver);
    setIsMapModalOpen(true);
  };

  const handleCloseMapModal = () => {
    setIsMapModalOpen(false);
    setSelectedDriverForMap(null);
  };

  onMount(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    metricsStore.fetchKPIMetrics();
    metricsStore.fetchOperationsStats();
    driversStore.fetchDrivers();
    alertsStore.fetchAlerts();
    districtsStore.fetchDistricts();

    // –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    metricsStore.startMetricsUpdate();
    driversStore.subscribeToDriverUpdates();
    alertsStore.subscribeToAlertUpdates();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–º—É –∏–∑ localStorage
    const savedTheme = localStorage.getItem('darkMode');
    if (savedTheme === 'true') {
      setIsDarkMode(true);
      document.documentElement.classList.add('dark');
    }
  });

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è popup –∫–Ω–æ–ø–æ–∫ –∫–∞—Ä—Ç—ã
  (window as any).callDriver = (phone: string) => {
    window.open(`tel:${phone}`, '_self');
  };

  (window as any).messageDriver = (driverId: string) => {
    const driver = driversStore.drivers().find(d => d.id === driverId);
    if (driver) {
      const message = `–ü—Ä–∏–≤–µ—Ç, ${driver.first_name}! –ö–∞–∫ –¥–µ–ª–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–∞–º–∏?`;
      const encodedMessage = encodeURIComponent(message);
      window.open(`https://wa.me/374${driver.phone.replace(/\D/g, '')}?text=${encodedMessage}`, '_blank');
    }
  };

  (window as any).showDriverDetails = (driverId: string) => {
    const driver = driversStore.drivers().find(d => d.id === driverId);
    if (driver) {
      handleDriverClick(driver);
    }
  };

  onCleanup(() => {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    metricsStore.stopMetricsUpdate();
    driversStore.unsubscribeFromDriverUpdates();
    alertsStore.unsubscribeFromAlertUpdates();
  });

  return (
    <div class={styles.container}>
      <div class={styles.header}>
        <div class={styles.headerContent}>
          <div>
            <h1>Dashboard</h1>
            <p>–û–±–∑–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–π</p>
          </div>
                 <Button 
                   onClick={toggleDarkMode}
                   variant="ghost"
                   size="small"
                   class={styles.themeToggle}
                 >
                   {isDarkMode() ? '‚òÄÔ∏è' : 'üåô'}
                 </Button>
        </div>
      </div>

      <div class={styles.kpiGrid}>
        <Card title="üë• –í–æ–¥–∏—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω" padding="large" shadow="small">
          <div class={styles.kpiValue}>
            {driversStore.driversOnline()}
          </div>
          <div class={styles.kpiLabel}>
            –í—Å–µ–≥–æ: {driversStore.drivers().length}
          </div>
          <div class={styles.kpiChart}>
            <Chart 
              type="area"
              data={metricsStore.kpiMetrics().drivers_online_trend} 
              color="#34C759"
              height={40}
              showGrid={false}
              showAxis={false}
            />
          </div>
        </Card>

        <Card title="üì¶ –ó–∞–∫—Ä—ã—Ç–æ –∞–¥—Ä–µ—Å–æ–≤" padding="large" shadow="small">
          <div class={styles.kpiValue}>
            {metricsStore.kpiMetrics().completed_addresses}
          </div>
          <div class={styles.kpiLabel}>
            –°–µ–≥–æ–¥–Ω—è
          </div>
          <div class={styles.kpiChart}>
            <Chart 
              type="area"
              data={metricsStore.kpiMetrics().completed_addresses_trend} 
              color="#007AFF"
              height={40}
              showGrid={false}
              showAxis={false}
            />
          </div>
        </Card>

        <Card title="‚è±Ô∏è –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Å—Ç–æ–π" padding="large" shadow="small">
          <div class={styles.kpiValue}>
            {metricsStore.kpiMetrics().avg_idle_minutes} –º–∏–Ω
          </div>
          <div class={styles.kpiLabel}>
            –°—Ç–∞—Ç—É—Å: {metricsStore.kpiMetrics().idle_status}
          </div>
          <div class={styles.kpiChart}>
            <Chart 
              type="area"
              data={[10, 12, 8, 15, 20, 18, 16]} 
              color={metricsStore.kpiMetrics().idle_status === 'normal' ? '#34C759' : '#FF9500'}
              height={40}
              showGrid={false}
              showAxis={false}
            />
          </div>
        </Card>

        <Card title="üõ£Ô∏è –í—Å–µ–≥–æ –∫–º" padding="large" shadow="small">
          <div class={styles.kpiValue}>
            {metricsStore.kpiMetrics().total_km.toFixed(1)}
          </div>
          <div class={styles.kpiLabel}>
            –ó–∞ —Å–µ–≥–æ–¥–Ω—è
          </div>
          <div class={styles.kpiChart}>
            <Chart 
              type="area"
              data={metricsStore.kpiMetrics().total_km_by_hour} 
              color="#FF9500"
              height={40}
              showGrid={false}
              showAxis={false}
            />
          </div>
        </Card>
      </div>


      <div class={styles.quickFiltersSection}>
        <QuickFilters 
          filters={quickFilters()}
          onFilterClick={handleQuickFilterClick}
          onClearAll={handleClearAllFilters}
        />
      </div>

      <div class={styles.comparisonSection}>
        <PeriodComparison />
      </div>

      <div class={styles.mainContent}>
        <Card title="üë• –í–æ–¥–∏—Ç–µ–ª–∏" class={styles.driversCard}>
          <div class={styles.searchPanel}>
            <div class={styles.searchBar}>
              <Input
                type="text"
                placeholder="–ü–æ–∏—Å–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π..."
                value={searchQuery()}
                onInput={(e) => setSearchQuery(e.currentTarget.value)}
              />
            </div>
            <div class={styles.filters}>
              <Select
                value={filterStatus() || undefined}
                onChange={(value) => setFilterStatus(value === '' ? null : value)}
                options={[
                  { value: '', label: '–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã' },
                  { value: 'ONLINE', label: '–û–Ω–ª–∞–π–Ω' },
                  { value: 'OFFLINE', label: '–û—Ñ–ª–∞–π–Ω' },
                  { value: 'IDLE', label: '–ü—Ä–æ—Å—Ç–æ–π' },
                  { value: 'DRIVING', label: '–í –ø—É—Ç–∏' }
                ]}
              />
              <Select
                value={filterRegion() || undefined}
                onChange={(value) => setFilterRegion(value === '' ? null : value)}
                options={[
                  { value: '', label: '–í—Å–µ —Ä–∞–π–æ–Ω—ã' },
                  ...driversStore.drivers()
                    .map(d => d.district?.name_ru || d.region)
                    .filter(Boolean)
                    .filter((value, index, self) => self.indexOf(value) === index) // —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    .map(districtName => ({
                      value: districtName || '',
                      label: districtName || ''
                    }))
                ]}
              />
            </div>
            <div class={styles.exportButtons}>
              <Button 
                onClick={() => handleExportDrivers('csv')}
                variant="ghost"
                size="small"
              >
                üìä CSV
              </Button>
              <Button 
                onClick={() => handleExportDrivers('pdf')}
                variant="ghost"
                size="small"
              >
                üìÑ PDF
              </Button>
              <Button 
                onClick={handleExportAnalytics}
                variant="ghost"
                size="small"
              >
                üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
              </Button>
            </div>
          </div>
          
          {driversStore.drivers().length === 0 ? (
            <div class={styles.empty}>
              <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–¥–∏—Ç–µ–ª—è—Ö</p>
            </div>
          ) : (
            <>
              <div class={styles.resultsInfo}>
                –ü–æ–∫–∞–∑–∞–Ω–æ {filteredDrivers().length} –∏–∑ {driversStore.drivers().length} –≤–æ–¥–∏—Ç–µ–ª–µ–π
              </div>
                     <Table
                       columns={[
                         { key: 'name', header: '–í–æ–¥–∏—Ç–µ–ª—å', width: '20%' },
                         { key: 'region', header: '–†–∞–π–æ–Ω', width: '15%' },
                         { key: 'status', header: '–°—Ç–∞—Ç—É—Å', width: '12%' },
                         { key: 'addresses', header: '–ê–¥—Ä–µ—Å–∞', width: '12%' },
                         { key: 'distance', header: '–ö–º', width: '10%' },
                         { key: 'phone', header: '–¢–µ–ª–µ—Ñ–æ–Ω', width: '14%' },
                         { key: 'actions', header: '–î–µ–π—Å—Ç–≤–∏—è', width: '17%' }
                       ]}
                       data={filteredDrivers().map(driver => ({
                         name: () => (
                           <button 
                             class={styles.driverNameBtn}
                             onClick={() => handleDriverClick(driver)}
                           >
                             {driver.first_name} {driver.last_name}
                           </button>
                         ),
                         region: driver.district?.name_ru || driver.region || '–ù–µ —É–∫–∞–∑–∞–Ω',
                         status: () => <Badge status={driver.status} size="small" />,
                         addresses: `${driver.todayStats?.deliveredStops || 0}/${driver.todayStats?.totalStops || 0}`,
                         distance: (driver.todayStats?.distanceKm || 0).toFixed(1),
                         phone: driver.phone,
                         actions: () => (
                           <div class={styles.actionButtons}>
                             <button 
                               class={styles.actionBtn} 
                               onClick={() => window.open(`tel:${driver.phone}`, '_self')}
                             >
                               üìû
                             </button>
                             <button 
                               class={styles.actionBtn} 
                               onClick={() => alert(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ${driver.first_name}`)}
                             >
                               üí¨
                             </button>
                             <button 
                               class={styles.actionBtn} 
                               onClick={() => handleDriverMapClick(driver)}
                               title="–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ"
                             >
                               üó∫Ô∏è
                             </button>
                           </div>
                         )
                       }))}
                     />
            </>
          )}
        </Card>

        <Card title="üö® –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª—ë—Ä—Ç—ã" class={styles.alertsCard}>
          <div class={styles.alertsList}>
            {alertsStore.unacknowledgedAlerts().length === 0 ? (
              <div class={styles.empty}>
                <p>‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª—ë—Ä—Ç–æ–≤</p>
                <p class={styles.hint}>–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ</p>
              </div>
            ) : (
              alertsStore.unacknowledgedAlerts().map((alert) => (
                <div class={styles.alertItem} onClick={() => handleAlertClick(alert)}>
                  <div class={styles.alertIcon}>
                    <Badge 
                      status={alert.severity === 'CRITICAL' ? 'error' : 
                             alert.severity === 'WARNING' ? 'warning' : 'info'} 
                      size="small" 
                    />
                  </div>
                  <div class={styles.alertContent}>
                    <h4 class={styles.alertTitle}>{alert.message}</h4>
                    <p class={styles.alertTime}>
                      {new Date(alert.created_at).toLocaleTimeString('ru-RU')}
                    </p>
                    {alert.driver && (
                      <p class={styles.alertDriver}>
                        üë§ {alert.driver.first_name} {alert.driver.last_name}
                      </p>
                    )}
                  </div>
                  <div class={styles.alertActions}>
                    <button 
                      class={styles.alertBtn} 
                      title="–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
                      onClick={(e) => {
                        e.stopPropagation();
                        handleAlertClick(alert);
                      }}
                    >
                      üëÅÔ∏è
                    </button>
                    <button 
                      class={styles.alertBtn} 
                      title="–ó–∞–∫—Ä—ã—Ç—å –∞–ª—ë—Ä—Ç"
                      onClick={async (e) => {
                        e.stopPropagation();
                        await handleAcknowledgeAlert(alert.id);
                      }}
                    >
                      ‚úÖ
                    </button>
                  </div>
                </div>
              ))
            )}
          </div>
        </Card>
      </div>

      <div class={styles.mapSection}>
        <Card title="üó∫Ô∏è –ö–∞—Ä—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π" padding="large">
          <div class={styles.mapControls}>
            <Button 
              onClick={() => setShowTracks(!showTracks())}
              variant="ghost"
              size="small"
            >
              {showTracks() ? '–°–∫—Ä—ã—Ç—å —Ç—Ä–µ–∫–∏' : '–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–∫–∏'}
            </Button>
            <Button 
              onClick={() => setShowClusters(!showClusters())}
              variant="ghost"
              size="small"
            >
              {showClusters() ? '–†–∞–∑–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å' : '–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å'}
            </Button>
          </div>
          <MapView 
            drivers={filteredDrivers()}
            showTracks={showTracks()}
            showClusters={showClusters()}
            showRoutes={showTracks()}
            onDriverClick={handleDriverClick}
          />
        </Card>
      </div>

      <div class={styles.analyticsSection}>
        <Card title="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è" padding="large">
          <div class={styles.chartsGrid}>
            <div class={styles.chartCard}>
              <h4>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º</h4>
              <Chart 
                type="line"
                data={[2, 3, 5, 8, 12, 15, 18, 20, 22, 25, 28, 30, 32, 35, 38, 40, 42, 45, 48, 50, 52, 55, 58, 60]}
                height={200}
                color="#007AFF"
                options={{
                  xAxis: {
                    data: Array.from({length: 24}, (_, i) => `${i}:00`)
                  }
                }}
              />
            </div>
            
            <div class={styles.chartCard}>
              <h4>–î–æ—Å—Ç–∞–≤–∫–∏ –ø–æ —á–∞—Å–∞–º</h4>
              <Chart 
                type="bar"
                data={[5, 8, 12, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115]}
                height={200}
                color="#34C759"
                options={{
                  xAxis: {
                    data: Array.from({length: 24}, (_, i) => `${i}:00`)
                  }
                }}
              />
            </div>
            
            <div class={styles.chartCard}>
              <h4>–°—Ç–∞—Ç—É—Å—ã –≤–æ–¥–∏—Ç–µ–ª–µ–π</h4>
              <Chart 
                type="pie"
                data={[
                  { name: '–û–Ω–ª–∞–π–Ω', value: driversStore.driversOnline() },
                  { name: '–ü—Ä–æ—Å—Ç–æ–π', value: driversStore.driversIdle() },
                  { name: '–û—Ñ–ª–∞–π–Ω', value: driversStore.drivers().length - driversStore.driversOnline() - driversStore.driversIdle() }
                ]}
                height={200}
                color="#FF9500"
              />
            </div>
            
            <div class={styles.chartCard}>
              <h4>–ü—Ä–æ–±–µ–≥ –ø–æ —á–∞—Å–∞–º</h4>
              <Chart 
                type="area"
                data={[10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125]}
                height={200}
                color="#FF9500"
                options={{
                  xAxis: {
                    data: Array.from({length: 24}, (_, i) => `${i}:00`)
                  }
                }}
              />
            </div>
          </div>
        </Card>
             </div>

             {/* Driver Detail Modal */}
             {isModalOpen() && selectedDriver() && (
               <DriverDetailModal 
                 driver={selectedDriver()}
                 isOpen={isModalOpen()}
                 onClose={handleCloseModal}
               />
             )}

             {isAlertModalOpen() && selectedAlert() && (
               <AlertDetailModal 
                 alert={selectedAlert()}
                 isOpen={isAlertModalOpen()}
                 onClose={handleCloseAlertModal}
                 onAcknowledge={handleAcknowledgeAlert}
               />
             )}

             {isMapModalOpen() && selectedDriverForMap() && (
               <DriverMapModal 
                 driver={selectedDriverForMap()}
                 isOpen={isMapModalOpen()}
                 onClose={handleCloseMapModal}
               />
             )}

           </div>
         );
       }

       export default DashboardPage;

